 #!/usr/bin/python3.4
   # Written by Anirudh Anand (lucif3r) : email - anirudh@anirudhanand.com   
   # This program will help to decrypt cipher text to plain text if you have
   # more than 1 cipher text encrypted with same Modulus (N) but different
   # exponents. We use extended Euclideangm Algorithm to achieve this.
   

   
import gmpy2
   
   
class RSAModuli:
    def __init__(self):
        self.a = 0
        self.b = 0
        self.m = 0
        self.i = 0
    def gcd(self, num1, num2):
        if num1 < num2:
            num1, num2 = num2, num1
        while num2 != 0:
            num1, num2 = num2, num1 % num2
        return num1
    def extended_euclidean(self, e1, e2):
        self.a = gmpy2.invert(e1, e2)
        self.b = (float(self.gcd(e1, e2)-(self.a*e1)))/float(e2)
    def modular_inverse(self, c1, c2, N):
        i = gmpy2.invert(c2, N)
        mx = pow(c1, self.a, N)
        my = pow(i, int(-self.b), N)
        self.m= mx * my % N
    def print_value(self):
        print("Plain Text: ", self.m)
   
   
def main():
    c = RSAModuli()
    N  = 166769591394517090145138500433433399998605322698338278949312969996061926099584692726937407984549924292577279144637971608081665582416333251371665355720954216372175757068507456317239293259982131197576799085628678051515685097363706023670326997378555657595200081205028178501829010333436983331609864501058212754240708054136658609378640693821365756046372910993941213719703035905814628359653276798589409859131029292695513089597953753253419218655086023927104183884988215182403982834187957513331477564823473360015971032315168530827022480019946999367699676786302353122931948534729353528173878038340494714758073186704164620473699111535168847913276080071440345197387149747784800613424955529302435237870337851722695186139631988370953930449035193292517324447666166006450725644295040211291293777556920083937527048810340720450857733718030904976413808871330182287450249541811129602005664657376506758337725050698148431859061139270734137058992920761705766214832675257874256925848289720734464111668396932210631675521723320267944568732301960136051779666646352701095680773848043293867582642237141591737835579268483443122915667366964749945447969670035070596133389193342579592190228627531828228293979984176614648550451913873259309251442788561114984534927393

    c1 = 116946757254414779990054792493361387678817801420788673389946026118650008778565187326310362853600879097257960733957954007990847791616428233738464916430892027657835023461993175076254820387382635759965747774558609329295268160342458173183350010304809695852763721798906357144534379146331901209591258005890551861546017294724639265327674850133497458415374804022537367812987299610378029251601056065167985762883169132244491038086760015299227702116629695996386249910214829033096751096967190860582630133593857570927678058780935640954831853974602470568615240016193782208181465618692282980025679214193290025203650006502484833070926080968226932575707322071092412593915695563757173648050245960388162368081410249674455008623980089866322208203613672061830823007936931861907357694979688158142236205529202521565020148722485399263158751020732644029483569311183865132902880789692056960600682112089262739015857891602945145619026017189672875571572116891441448693844545501864823604681548795303139964445679218486944851406372727854051782358974508151822819275454379446534967788986740548394858452141743633039600728792914483610922336446364896026371005796040709449478491920958501445287804966419715333576224238373529767419338894164002808797226853838310436080605448
    c2 = 96173291829388600408251625050332956578759614768568115165199291020688596280825704751683623434785492280247069526186138936507983571405745009289169818231540017018045555587199589982049520337393923433722527808502008519717581704429941926371189225260329397185300381893900079259246721790562250171113702871627038490614781403963533404038982665435527071087172253112287069833840329898880100191864139915745715230989348499748114147433101691414410203283789895634512903190935285152290647900215138200750269739583736412357810889169847992196090573961454478345570481834602964916006046730323085945113027571452417503813828961549439945070177836498681570245579588118052342655595264340330662236989420524152208714251971130478503138074897250207700021016783948134844948574104782275976163037061041585581793250923749431935168096818319744028254957050701577594425204680930207578438682138036608284315946276302409328220745318602620601672124855401934357875777755813867913078955697656839607768516283874574449579861849795692229841751669655629659987060673260989612372308866772649832296420766043934326919982204192883037758771723298216268717478237985407913394436270439971468957018385692573768897433452589148010100435030040405437988655907978031911521121361456651160477450250
    e1 = 257
    e2 = 65537
    c.extended_euclidean(e1, e2)
    c.modular_inverse(c1, c2, N)
    c.print_value()
    
if __name__ == '__main__':
    main()
